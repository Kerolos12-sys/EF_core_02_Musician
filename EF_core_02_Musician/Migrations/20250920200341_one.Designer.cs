// <auto-generated />
using System;
using EF_core_02_Musician;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_core_02_Musician.Migrations
{
    [DbContext(typeof(dbcontext))]
    [Migration("20250920200341_one")]
    partial class one
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EF_core_02_Musician.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("musician_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("musician_id");

                    b.ToTable("Album");
                });

            modelBuilder.Entity("EF_core_02_Musician.Instrument", b =>
                {
                    b.Property<int>("Name")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Name"));

                    b.Property<int>("Key")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("Instrument");
                });

            modelBuilder.Entity("EF_core_02_Musician.Musician", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Ph_Number")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Musician");
                });

            modelBuilder.Entity("EF_core_02_Musician.Musician_Instruments", b =>
                {
                    b.Property<int>("Musician_Id")
                        .HasColumnType("int");

                    b.Property<int>("Instrument_Id")
                        .HasColumnType("int");

                    b.HasKey("Musician_Id", "Instrument_Id");

                    b.HasIndex("Instrument_Id");

                    b.ToTable("Musician_Instruments");
                });

            modelBuilder.Entity("EF_core_02_Musician.Musician_Songs", b =>
                {
                    b.Property<int>("Musician_Id")
                        .HasColumnType("int");

                    b.Property<int>("Song_Id")
                        .HasColumnType("int");

                    b.HasKey("Musician_Id", "Song_Id");

                    b.HasIndex("Song_Id");

                    b.ToTable("Musician_Songs");
                });

            modelBuilder.Entity("EF_core_02_Musician.Song", b =>
                {
                    b.Property<int>("Song_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Song_Id"));

                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Song_Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Song");
                });

            modelBuilder.Entity("EF_core_02_Musician.Album", b =>
                {
                    b.HasOne("EF_core_02_Musician.Musician", "musician")
                        .WithMany("albums")
                        .HasForeignKey("musician_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("musician");
                });

            modelBuilder.Entity("EF_core_02_Musician.Musician_Instruments", b =>
                {
                    b.HasOne("EF_core_02_Musician.Instrument", "Instrument")
                        .WithMany("MusicianInstruments")
                        .HasForeignKey("Instrument_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EF_core_02_Musician.Musician", "Musician")
                        .WithMany("MusicianInstruments")
                        .HasForeignKey("Musician_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instrument");

                    b.Navigation("Musician");
                });

            modelBuilder.Entity("EF_core_02_Musician.Musician_Songs", b =>
                {
                    b.HasOne("EF_core_02_Musician.Musician", "Musician")
                        .WithMany("musician_Songs")
                        .HasForeignKey("Musician_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_core_02_Musician.Song", "Song")
                        .WithMany("musician_Songs")
                        .HasForeignKey("Song_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Musician");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("EF_core_02_Musician.Song", b =>
                {
                    b.HasOne("EF_core_02_Musician.Album", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("EF_core_02_Musician.Album", b =>
                {
                    b.Navigation("Songs");
                });

            modelBuilder.Entity("EF_core_02_Musician.Instrument", b =>
                {
                    b.Navigation("MusicianInstruments");
                });

            modelBuilder.Entity("EF_core_02_Musician.Musician", b =>
                {
                    b.Navigation("MusicianInstruments");

                    b.Navigation("albums");

                    b.Navigation("musician_Songs");
                });

            modelBuilder.Entity("EF_core_02_Musician.Song", b =>
                {
                    b.Navigation("musician_Songs");
                });
#pragma warning restore 612, 618
        }
    }
}
